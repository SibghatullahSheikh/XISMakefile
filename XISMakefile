#
# XISMakefile
#

VER		= 20100519

# Initialization
XSEL	= xselect
XSELW	= xselect-wrapper
XSPEC	= xspec
PI		= xispi
PLRN	= punlearn
CSIS	= cleansis
RMFGEN	= xisrmfgen
ARFGEN	= xissimarfgen
NXBGEN	= xisnxbgen
ADDARF	= addarf

PARAM	= _Parameters.txt

.SUFFIXES:
.SUFFIXES: .evt .caldb .csis .reg .pha .img .fits .rmf .arf .parf .nxb .ps .eps .pdf .txt

.PRECIOUS: %.txt %.caldb %.csis %.evt %.pha %.rmf %.arf %.parf %.nxb

# Default Parameters

# Project Name (default to the current directory name)
PJNAME			= $(shell basename $(shell pwd))
# ARF Gen parallel count (default to 1)
NPROCS			= 1
# XSELECT pha_cutoff Parameter (default to oxygen range 0.5-0.7keV)
PHACUTOFF		= 137 192
# ARF Gen num_photon Parameter (default to program default)
ARF_PCNT		= 1000000
# NXB Gen time_min/max Parameter (default to program default)
NXB_TIME_MIN	= -150
NXB_TIME_MAX	= +150

# Override Default Parameters
-include $(PARAM)

# Files
XISROOT	:= $(ROOT)/xis
SRC3x3	:= $(wildcard $(XISROOT)/event_cl/*xi1*3x3*.evt.gz)
SRC5x5	:= $(wildcard $(XISROOT)/event_cl/*xi1*5x5*.evt.gz)
HKFILE	:= $(wildcard $(XISROOT)/hk/*xi1*.hk.gz)
ATTFILE	:= $(wildcard $(ROOT)/auxil/*.att.gz)
ORBFILE	:= $(wildcard $(ROOT)/auxil/*.orb.gz)

#
# Targets
#
.PHONY : all

all :
	@echo Please state targets from followings: param event image imager imageco imagerco lc lcco lcr lcrco spec rmf arf nxb xspec

# XSPEC (spec rmf arf nxb)
.PHONY : xspec

xspec : spec rmf arf nxb

# NXB
.PHONY : nxb

nxb : $(PJNAME).nxb

%.nxb : %.pha %.reg $(ATTFILE) $(ORBFILE)
	-rm -f $@
	$(NXBGEN) \
		$@ \
		$< \
		SKYREG \
		$*.reg \
		$(ORBFILE) \
		$(ATTFILE) \
		pixq_and=0 pi_min=274 pi_max=548 \
		time_min=$(NXB_TIME_MIN) \
		time_max=$(NXB_TIME_MAX) \
		clobber=yes detmask=none

# ARF
.PHONY : arf

arf : $(PJNAME).arf

# ARF Generation in Parallel
ifeq ($(NPROCS),1)

# RMF to ARF (Single Thread)
%.arf : %.rmf $(PJNAME).evt %.reg %.pha $(ATTFILE)
	-rm -f $@
	$(ARFGEN) \
		clobber=yes \
		instrume=XIS1 \
		teldef=CALDB \
		leapfile=CALDB \
		mirrorfile=CALDB \
		reflectfile=CALDB \
		backproffile=CALDB \
		shieldfile=CALDB \
		calmaskfile='none' \
		pointing=AUTO \
		source_mode=UNIFORM \
		source_rmin=0 \
		source_rmax=20 \
		num_region=1 \
		region_mode=SKYREG \
		regfile1=$*.reg \
		arffile1=$@ \
		limit_mode=MIXED \
		num_photon=$(ARF_PCNT) \
		accuracy=0.005 \
		phafile=$*.pha \
		detmask='none' \
		gtifile=$(PJNAME).evt \
		attitude=$(ATTFILE) \
		rmffile=$< \
		estepfile=medium

else

# RMF to ARF (Multi Thread)

PID		:= $(shell echo $$$$)
ARFCMD	:= .arfcmd.$(PID)
ARFLIST	:= .arflist.$(PID)

%.arf : %.rmf $(PJNAME).evt %.reg %.pha $(ATTFILE)
	-rm -f $@
	-rm -f $(ARFCMD) $(ARFLIST)
	for i in {1..$(NPROCS)}; \
	do \
		echo \
			clobber=yes \
			instrume=XIS1 \
			teldef=CALDB \
			leapfile=CALDB \
			mirrorfile=CALDB \
			reflectfile=CALDB \
			backproffile=CALDB \
			shieldfile=CALDB \
			calmaskfile='none' \
			pointing=AUTO \
			source_mode=UNIFORM \
			source_rmin=0 \
			source_rmax=20 \
			num_region=1 \
			region_mode=SKYREG \
			regfile1=$*.reg \
			arffile1=$@$$i \
			limit_mode=MIXED \
			num_photon=`expr $(ARF_PCNT) / $(NPROCS)` \
			accuracy=0.005 \
			phafile=$*.pha \
			detmask='none' \
			gtifile=$(PJNAME).evt \
			attitude=$(ATTFILE) \
			rmffile=$< \
			estepfile=medium \
			rand_seed=$$i >>  $(ARFCMD); \
		echo $@$$i `echo 'scale=2; 1/$(NPROCS)' | bc` >> $(ARFLIST); \
	done
	cat $(ARFCMD) | xargs -L1 -t -P$(NPROCS) $(ARFGEN)
	$(ADDARF) @$(ARFLIST) out_ARF=$@
	-rm -f $@{1..$(NPROCS)}
	-rm -f $(ARFCMD) $(ARFLIST)

endif

# PARF

ifeq ($(NPROCS),1)

# RMF to Point-ARF (Single Thread)
%.parf : %.rmf $(PJNAME).evt %.reg %.pha $(ATTFILE)
	-test `grep -i circle $*.reg | wc -l` -ne 1 \
		(echo Error: Multiple regions not allowed. ; exit 1;)
	-rm -f $@
	$(ARFGEN) \
		clobber=yes \
		instrume=XIS1 \
		teldef=CALDB \
		leapfile=CALDB \
		mirrorfile=CALDB \
		reflectfile=CALDB \
		backproffile=CALDB \
		shieldfile=CALDB \
		calmaskfile='none' \
		pointing=AUTO \
		source_mode=SKYXY \
		source_x=`cat $*.reg | grep -i circle | sed -e 's/.*(\([^,]*\),.*/\1/'` \
		source_y=`cat $*.reg | grep -i circle | sed -e 's/.*([^,]*,\([^,]*\),.*/\1/'` \
		num_region=1 \
		region_mode=SKYREG \
		regfile1=$*.reg \
		arffile1=$@ \
		limit_mode=MIXED \
		num_photon=$(ARF_PCNT) \
		accuracy=0.005 \
		phafile=$*.pha \
		detmask='none' \
		gtifile=$(PJNAME).evt \
		attitude=$(ATTFILE) \
		rmffile=$< \
		estepfile=medium

else

# RMF to Point-ARF (Multi Thread)

PID		:= $(shell echo $$$$)
PARFCMD	:= .parfcmd.$(PID)
PARFLIST:= .parflist.$(PID)

%.parf : %.rmf $(PJNAME).evt %.reg %.pha $(ATTFILE)
	-rm -f $@
	-rm -f $(PARFCMD) $(PARFLIST)
	for i in {1..$(NPROCS)}; \
	do \
		echo \
			clobber=yes \
			instrume=XIS1 \
			teldef=CALDB \
			leapfile=CALDB \
			mirrorfile=CALDB \
			reflectfile=CALDB \
			backproffile=CALDB \
			shieldfile=CALDB \
			calmaskfile='none' \
			pointing=AUTO \
			source_mode=SKYXY \
			source_x=`cat $*.reg | grep -i circle | sed -e 's/.*(\([^,]*\),.*/\1/'` \
			source_y=`cat $*.reg | grep -i circle | sed -e 's/.*([^,]*,\([^,]*\),.*/\1/'` \
			num_region=1 \
			region_mode=SKYREG \
			regfile1=$*.reg \
			arffile1=$@$$i \
			limit_mode=MIXED \
			num_photon=`expr $(ARF_PCNT) / $(NPROCS)` \
			accuracy=0.005 \
			phafile=$*.pha \
			detmask='none' \
			gtifile=$(PJNAME).evt \
			attitude=$(ATTFILE) \
			rmffile=$< \
			estepfile=medium \
			rand_seed=$$i >>  $(PARFCMD); \
		echo $@$$i `echo 'scale=2; 1/$(NPROCS)' | bc` >> $(PARFLIST); \
	done
	cat $(PARFCMD) | xargs -L1 -t -P$(NPROCS) $(ARFGEN)
	$(ADDARF) @$(PARFLIST) out_ARF=$@
	-rm -f $@{1..$(NPROCS)}
	-rm -f $(PARFCMD) $(PARFLIST)

endif

# RMF
.PHONY : rmf

rmf : $(PJNAME).rmf

# PHA to RMF
.pha.rmf :
	-rm -f $@
	$(RMFGEN) phafile=$< outfile=$@

# Spectrum
.PHONY : spec

spec : $(PJNAME).pha

# EVT to PHA
%.pha : %.reg $(PJNAME).evt
	-rm -f $@
	$(XSELW) -e spec -r $< $(PJNAME).evt $@

# Light Curve (all energy level)
.PHONY : lc

lc : $(PJNAME)_lc.fits

$(PJNAME)_lc.fits : $(PJNAME).evt
	-rm -f $@ $*.ps $*.pco $*.qdp
	open -a X11
	$(XSELW) -e lc $< $*

# Light Curve (with region masking)
.PHONY : lcr

lcr : $(PJNAME)_lc_reg.fits

$(PJNAME)_lc_reg.fits : $(PJNAME).evt $(PJNAME).reg
	-rm -f $@ $*.ps $*.pco $*.qdp
	open -a X11
	$(XSELW) -e lc -r $(PJNAME).reg $< $*

# Light Curve (with pha cutoff)
.PHONY : lcco

lcco : $(PJNAME)_lc_co.fits

$(PJNAME)_lc_co.fits : $(PJNAME).evt
	-rm -f $@ $*.ps $*.pco $*.qdp
	open -a X11
	$(XSELW) -e lc -c "$(PHACUTOFF)" $< $*

# Light Curve (with region masking + pha cutoff)
.PHONY : lcrco

lcrco : $(PJNAME)_lc_reg_co.fits

$(PJNAME)_lc_reg_co.fits : $(PJNAME).evt $(PJNAME).reg
	-rm -f $@ $*.ps $*.pco $*.qdp
	open -a X11
	$(XSELW) -e lc -r $(PJNAME).reg -c "$(PHACUTOFF)" $< $*

# Image (with region masking + cutoff filter)
.PHONY : imagerco

imagerco : $(PJNAME)_8_reg_co.img $(PJNAME)_16_reg_co.img

define CSET_XSEL_IMG_8_MASK_CO
xsel
no
read events $(PJNAME).evt
.
set xybinsize 8
filter pha_cutoff $(PHACUTOFF)
filter region $(PJNAME).reg
extract image
save image $(PJNAME)_8_reg_co.img
quit
no
endef
export CSET_XSEL_IMG_8_MASK_CO

define CSET_XSEL_IMG_16_MASK_CO
xsel
no
read events $(PJNAME).evt
.
set xybinsize 16
filter pha_cutoff $(PHACUTOFF)
filter region $(PJNAME).reg
extract image
save image $(PJNAME)_16_reg_co.img
quit
no
endef

export CSET_XSEL_IMG_16_MASK_CO

$(PJNAME)_8_reg_co.img : $(PJNAME).evt
	rm -f $@
	@echo "$$CSET_XSEL_IMG_8_MASK_CO" > .cset
	$(XSEL) < .cset
	rm -f .cset

$(PJNAME)_16_reg_co.img : $(PJNAME).evt
	rm -f $@
	@echo "$$CSET_XSEL_IMG_16_MASK_CO" > .cset
	$(XSEL) < .cset
	rm -f .cset

# Image (with cutoff filter)
.PHONY : imageco

imageco : $(PJNAME)_8_co.img $(PJNAME)_16_co.img

define CSET_XSEL_IMG_8_CO
xsel
no
read events $(PJNAME).evt
.
set xybinsize 8
filter pha_cutoff 137 192
extract image
save image $(PJNAME)_8_co.img
quit
no
endef
export CSET_XSEL_IMG_8_CO

define CSET_XSEL_IMG_16_CO
xsel
no
read events $(PJNAME).evt
.
set xybinsize 16
filter pha_cutoff 137 192
extract image
save image $(PJNAME)_16_co.img
quit
no
endef

export CSET_XSEL_IMG_16_CO

$(PJNAME)_8_co.img : $(PJNAME).evt
	rm -f $@
	@echo "$$CSET_XSEL_IMG_8_CO" > .cset
	$(XSEL) < .cset
	rm -f .cset

$(PJNAME)_16_co.img : $(PJNAME).evt
	rm -f $@
	@echo "$$CSET_XSEL_IMG_16_CO" > .cset
	$(XSEL) < .cset
	rm -f .cset

# Image (with region masking)
.PHONY : imager

imager : $(PJNAME)_8_reg.img $(PJNAME)_16_reg.img

define CSET_XSEL_IMG_8_MASK
xsel
no
read events $(PJNAME).evt
.
set xybinsize 8
filter region $(PJNAME).reg
extract image
save image $(PJNAME)_8_reg.img
quit
no
endef
export CSET_XSEL_IMG_8_MASK

define CSET_XSEL_IMG_16_MASK
xsel
no
read events $(PJNAME).evt
.
set xybinsize 16
filter region $(PJNAME).reg
extract image
save image $(PJNAME)_16_reg.img
quit
no
endef

export CSET_XSEL_IMG_16_MASK

$(PJNAME)_8_reg.img : $(PJNAME).evt $(PJNAME).reg
	rm -f $@
	@echo "$$CSET_XSEL_IMG_8_MASK" > .cset
	$(XSEL) < .cset
	rm -f .cset

$(PJNAME)_16_reg.img : $(PJNAME).evt $(PJNAME).reg
	rm -f $@
	@echo "$$CSET_XSEL_IMG_16_MASK" > .cset
	$(XSEL) < .cset
	rm -f .cset

# Image (no region masking)
.PHONY : image

image : $(PJNAME)_8.img $(PJNAME)_16.img

define CSET_XSEL_IMG_8
xsel
no
read events $(PJNAME).evt
.
set xybinsize 8
extract image
save image $(PJNAME)_8.img
quit
no
endef
export CSET_XSEL_IMG_8

define CSET_XSEL_IMG_16
xsel
no
read events $(PJNAME).evt
.
set xybinsize 16
extract image
save image $(PJNAME)_16.img
quit
no
endef

export CSET_XSEL_IMG_16

$(PJNAME)_8.img : $(PJNAME).evt
	rm -f $@
	@echo "$$CSET_XSEL_IMG_8" > .cset
	$(XSEL) < .cset
	rm -f .cset

$(PJNAME)_16.img : $(PJNAME).evt
	rm -f $@
	@echo "$$CSET_XSEL_IMG_16" > .cset
	$(XSEL) < .cset
	rm -f .cset

# Event
.PHONY : event

event : $(PJNAME).evt

$(PJNAME).evt : $(PJNAME)_3x3.csis $(PJNAME)_5x5.csis
	-rm -f $@
	$(XSELW) -e event "$(PJNAME)_3x3.csis $(PJNAME)_5x5.csis" $@

# CALDB
$(PJNAME)_3x3.caldb : $(SRC3x3) $(HKFILE)
	-rm -f $@
	$(PI) infile=$(SRC3x3) outfile=$@ hkfile=$(HKFILE)

$(PJNAME)_5x5.caldb : $(SRC5x5) $(HKFILE)
	-rm -f $@
	$(PI) infile=$(SRC5x5) outfile=$@ hkfile=$(HKFILE)

# Clean SIS
.caldb.csis :
	-rm -f $@
	$(PLRN) $(CSIS)
	$(CSIS) \
		chipcol=SEGMENT \
		datafile=$< \
		outfile=$@ \
		cellsize=5 \
		logprob=-5.3 \
		bthresh=3 \
		phamin=0 \
		phamax=4095

# EPS and PDF
.ps.eps :
	-rm -f $@
	ps2eps -R=+ --ignoreBB $<

.eps.pdf :
	-rm -f $@
	epstopdf $<

# Clean
.PHONY : clean cleanimage cleanlc

clean : cleanimage cleanlc
	rm -f *.evt *.caldb *.csis *.pha *.rmf *.arf *.nxb
cleanimage :
	rm -f $(PJNAME)*.img

cleanlc :
	rm -f $(PJNAME)_lc*.fits $(PJNAME)_lc*.ps $(PJNAME)_lc*.pco $(PJNAME)_lc*.qdp

# Parameter
.PHONY : param

param : $(PARAM)

define PARAMETERS
# XIS Makefile Parameters
#
# Version: $(VER)

# Project Name
PJNAME		= $(PJNAME)

# Suzaku Data Source
ROOT		= ***CHANGE*HERE***

# Parallel Job Count for ARF Gen
NPROCS		= $(NPROCS)

# PHA Cutoff Range (default to oxygen range)
PHACUTOFF	= $(PHACUTOFF)

# ARF Gen Photon Count
ARF_PCNT	= $(ARF_PCNT)

# NXB Gen
NXB_TIME_MIN	= $(NXB_TIME_MIN)
NXB_TIME_MAX	= $(NXB_TIME_MAX)
endef
export PARAMETERS

$(PARAM) :
	@echo "$$PARAMETERS" > $@
	@echo Parameter file generated.
